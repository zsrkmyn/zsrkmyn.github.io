<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Stephen's Home - posts</title><link href="https://zsrkmyn.github.io/" rel="alternate"></link><link href="https://zsrkmyn.github.io/feeds/posts.atom.xml" rel="self"></link><id>https://zsrkmyn.github.io/</id><updated>2018-01-12T00:00:00+08:00</updated><entry><title>伪·如何在 Linux 下使用深信服 SSL VPN</title><link href="https://zsrkmyn.github.io/how-to-use-sangfor-sslvpn-in-linux.html" rel="alternate"></link><published>2018-01-12T00:00:00+08:00</published><updated>2018-01-12T00:00:00+08:00</updated><author><name>Stephen Zhang</name></author><id>tag:zsrkmyn.github.io,2018-01-12:/how-to-use-sangfor-sslvpn-in-linux.html</id><summary type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id4"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id5"&gt;配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id6"&gt;画张图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;背景&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文大概会很水……&lt;/p&gt;
&lt;p&gt;由于要在外网访问校内的资源，包括实验室的服务器什么的，所以学校提供了接入校内的 VPN 服务。三本院校的采用国内著名的深信服 SSL VPN。众所周知，国内各种企业的产品都是没有 Linux 版本的，所以要在 Linux 下使用深信服的 SSL VPN，还是得装个虚拟机 _(:з」∠)_ 好了，感觉读到这里你要就失望了，哎，没办法呀，有谁去破解下辣鸡深信服的 SSL VPN 协议呗？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;配置&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;嗯，用 qemu 装个 Bugdows，在 Bugdows 上装个深信服的 EasyConnect。&lt;/p&gt;
&lt;p&gt;在 Linux 下创建一个 bridge：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ip …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id4"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id5"&gt;配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id6"&gt;画张图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;背景&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文大概会很水……&lt;/p&gt;
&lt;p&gt;由于要在外网访问校内的资源，包括实验室的服务器什么的，所以学校提供了接入校内的 VPN 服务。三本院校的采用国内著名的深信服 SSL VPN。众所周知，国内各种企业的产品都是没有 Linux 版本的，所以要在 Linux 下使用深信服的 SSL VPN，还是得装个虚拟机 _(:з」∠)_ 好了，感觉读到这里你要就失望了，哎，没办法呀，有谁去破解下辣鸡深信服的 SSL VPN 协议呗？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;配置&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;嗯，用 qemu 装个 Bugdows，在 Bugdows 上装个深信服的 EasyConnect。&lt;/p&gt;
&lt;p&gt;在 Linux 下创建一个 bridge：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ip l add qbr0 type bridge
ip l set qbr0 up
&lt;/pre&gt;
&lt;p&gt;启动虚拟机的时候需要给 Windows 添加两块网卡，一块采用 user 模式，也就是 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Slirp"&gt;SLiRP&lt;/a&gt; 模式，另一块采用 bridge 模式：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
qemu-system-x86-64 \
-netdev user,id=mynet0,net=192.168.76.0/24,dhcpstart=192.168.76.9 \
-device virtio-net,netdev=mynet0 \
-netdev bridge,id=mynet1,br=qbr0 \
-device virtio-net,netdev=mynet1 \
...
&lt;/pre&gt;
&lt;p&gt;这一步 qemu 会利用 qemu-bridge-helper 自动创建一个 tap 设备，并且把这个 tap 连到 qbr0 里。因为 qemu-bridge-helper 是 setuid 的，qemu-bridge-helper 会检查授权，如果这一步出现 ACL 错误提示，需要在 &lt;tt class="docutils literal"&gt;/etc/qemu/bridge.conf&lt;/tt&gt; 里添加上 &lt;tt class="docutils literal"&gt;allow qbr0&lt;/tt&gt; ，如果要允许接入任意的网桥，就添加 &lt;tt class="docutils literal"&gt;allow all&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;启动 Windows，启动 EasyConnect，这时 Windows 下应该出现 3 块网卡，一块 user 模式，我们叫它「Network 1」，一块是 bridge 模式，叫他「Network 2」，还有一个是 SSL VPN 的虚拟网卡，叫它「spicy chicken sangfor」。下面把 Linux 称为 Host，Windows 称为 Guest。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;「Network 1」用于接入互联网，这块网卡只能从 Guest 访问 Host，没法从 Host 访问 Guest，类似与 vbox 的 NAT 模式；&lt;/li&gt;
&lt;li&gt;「Network 2」用于 Host 和 Guest 间的相互通信，这里主要是把 Host 的数据传个 VPN；&lt;/li&gt;
&lt;li&gt;「spicy chicken sangfor」当然是用来访问内网了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这时候共享 「spicy chicken sangfor」，右键属性 -&amp;gt; 共享 -&amp;gt; 选「Network 2」 -&amp;gt; 确定。之后 Windows 会自动把「Network 2」的 IP 设置成 192.168.137.1，并且在这个网络上启动一个 DHCP 服务器。我不太懂 Windows 为啥要把 IP 改成这个，用原来的不好么？&lt;/p&gt;
&lt;p&gt;在 Linux 上对 qbr0 启动 dhcpcd，qbr0 会自动分配到一个 192.168.137.X/24 的地址，当然也可以手动设置，只要在这个网段内就可以了。再配置一下路由表，让内网的 IP 走 qbr0 接口就好了：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ip r add 10.0.0.0/8 via 192.168.137.1 dev qbr0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;画张图&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;其实很好理解，现在访问内网的路由大概是这样：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
                               (VPN)                          (ICS)
Guest(Windows)    [Network 1] &amp;lt;----- [spicy chicken sangfor] &amp;lt;----- [Network 2]
                       |                                                 ^
                       | (SLiRP)                                         |
-----------------------|-------------------------------------------------|-------------
                       |                                                 |
                       v                                                 |
Host(Linux)          [eth0]                                           [qbr0] &amp;lt;- [tap0]
                       |                                                          ^
                       v                                                          |
                     target                                                    request
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;EOF&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="sangfor"></category><category term="vpn"></category><category term="linux"></category></entry><entry><title>记一次打败坑爹魅族的手机管家经历</title><link href="https://zsrkmyn.github.io/how-do-i-fvck-flymed.html" rel="alternate"></link><published>2017-07-20T00:00:00+08:00</published><updated>2017-07-20T00:00:00+08:00</updated><author><name>Stephen Zhang</name></author><id>tag:zsrkmyn.github.io,2017-07-20:/how-do-i-fvck-flymed.html</id><summary type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id7"&gt;吐槽&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id8"&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id9"&gt;折腾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id10"&gt;丑陋的解决方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;吐槽&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;前两天我的魅族手机终于在过保 10 天前达成了 同一部件损坏成就 [3/3] ！于是根据魅族的售后政策，果断申请了换新。新手机到之后，由于辣鸡魅族不让刷第三方固件，我选择更新到了 flyme 5 的最后一个稳定版本。&lt;/p&gt;
&lt;p&gt;之所以没更新到 flyme 6，是因为 6 相比 5 多了很多产品经理帮用户作出的脑残决定。诸如新增了“智能”通知栏，大概是就是把垃圾通知屏蔽了，然而它一点也不智能，经常把我的 Gmail 呀、微信呀之类重要通知屏蔽了，最脑残的是，这货没有白名单机制，也就是说，用户不能选择屏蔽哪些应用不屏蔽哪些应用，所有的屏蔽都是由系统“智能”决定的！还有那个“安全”键盘，每次输密码的时候强制使用，还把数字打乱，极大降低了打字效率 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id7"&gt;吐槽&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id8"&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id9"&gt;折腾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id10"&gt;丑陋的解决方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;吐槽&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;前两天我的魅族手机终于在过保 10 天前达成了 同一部件损坏成就 [3/3] ！于是根据魅族的售后政策，果断申请了换新。新手机到之后，由于辣鸡魅族不让刷第三方固件，我选择更新到了 flyme 5 的最后一个稳定版本。&lt;/p&gt;
&lt;p&gt;之所以没更新到 flyme 6，是因为 6 相比 5 多了很多产品经理帮用户作出的脑残决定。诸如新增了“智能”通知栏，大概是就是把垃圾通知屏蔽了，然而它一点也不智能，经常把我的 Gmail 呀、微信呀之类重要通知屏蔽了，最脑残的是，这货没有白名单机制，也就是说，用户不能选择屏蔽哪些应用不屏蔽哪些应用，所有的屏蔽都是由系统“智能”决定的！还有那个“安全”键盘，每次输密码的时候强制使用，还把数字打乱，极大降低了打字效率。而且这两个功能都是用户没法关闭的，实在是没法忍受。&lt;/p&gt;
&lt;p&gt;拿到新手机后，看了看魅族的保修政策，居然又有新的一年的保修期，不得不说，魅族的品控虽然不咋，但售后还真是蛮良心的！无论去售后中心，还是网上客户，或者是电话客户，态度都很棒，这点要点个赞！本来想着过保了就 root，但现在又有了新的一年，不能忍了，所以还是选择了解锁 root。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;问题&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;然后新的问题出现了！安装科学上网工具之后，发现居然没法使用！开启 SS 后，基本上每隔半分钟就要重新进入 SS 程序主界面重新唤醒，不能忍啊！你想你在看个网页，每半分钟得切出浏览器再切回来，ingress 放两三个 xmp 又切出去得重新唤醒一次，多难受啊！我尝试找遍了魅族所有能设置的地方，包括自带的手机管家里的自启动权限、后台保留权限、联网权限，一切该设置的都设置了，能拖白名单的地方都拖白名单了，还是没能解决这个问题。而且在联网失败的时候通过 &lt;tt class="docutils literal"&gt;ps&lt;/tt&gt; 查看进程，SS 的几个进程完全正常没有被杀，在换手机前使用这个版本的固件也没有出现过这样的问题，所以我一度怀疑是 SS 自己的问题，回滚了 SS 几个版本后，问题依然得不到解决。不能忍了，决心好好研究下这个问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;折腾&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;既然进程运行正常没有被后台管理杀了，那么如果是程序自己的错误，就应该从日志查起。果然，&lt;tt class="docutils literal"&gt;adb logcat&lt;/tt&gt; 看到一堆报错！&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ adb logcat sha自dso由cks:V *:S
E/sha自dso由cks(15911): connect: Network is unreachable
E/sha自dso由cks(15911): connect: Network is unreachable
E/sha自dso由cks(15911): connect: Network is unreachable
E/sha自dso由cks(15911): connect: Network is unreachable
E/sha自dso由cks(15911): connect: Network is unreachable
E/sha自dso由cks(15924): getpeername: Transport endpoint is not connected
E/sha自dso由cks(15924): getpeername: Transport endpoint is not connected
E/sha自dso由cks(15924): getpeername: Transport endpoint is not connected
E/sha自dso由cks(15924): getpeername: Transport endpoint is not connected
E/sha自dso由cks(15924): getpeername: Transport endpoint is not connected
&lt;/pre&gt;
&lt;p&gt;而且正好这些报错都是在浏览器无法正常访问后出现，问题应该就在这了。看了看 ss-libev 的代码，应该是在连接远程服务器时出错的，然而我的手机直接访问远程服务器正常啊！好吧，用 &lt;tt class="docutils literal"&gt;watch &lt;span class="pre"&gt;-n1&lt;/span&gt; &amp;quot;netstat &lt;span class="pre"&gt;-atnp&amp;quot;&lt;/span&gt;&lt;/tt&gt; 看看连接状态，发现断网后 SS 不停地进入 SYN_SENT 状态，然后连接马上就断了。那就抓包吧！之前看过万能的百合仙子的一篇 &lt;a class="reference external" href="https://blog.lilydjwg.me/2015/6/1/wireshark-capturing-over-ssh.95147.html"&gt;文章&lt;/a&gt; 讲如何用 wireshark 远程抓包，这次正好用上了：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ nc -l 8899 | wireshark-gtk -i - -k                     # 电脑端 nc 收包然后传给 wireshark
# tcpdump -U -w - -p -f 'port 8388' | nc &amp;lt;ip_addr&amp;gt; 8899  # 手机端用 tcpdump 抓包发送给 nc
&lt;/pre&gt;
&lt;p&gt;当然似乎可以直接用 adb 执行 &lt;tt class="docutils literal"&gt;tcpdump&lt;/tt&gt; 命令把输出传给 wireshark ，然而我对 adb 不熟，不懂怎么直接以 root 执行命令……开始抓包时一切正常，浏览器也能正常访问网页，不到半分钟果然网断了，这时候 wireshark 这边居然一个包都收不到了！之前说过断网的时候 SS 是会调用 &lt;tt class="docutils literal"&gt;connect&lt;/tt&gt; 然后进入 SYN_WAIT 状态的，然而现在连 SYN 包的影子都没见到！既然连 TCP 包都直接被阻断了，直接想到就是被内核过滤，执行 &lt;tt class="docutils literal"&gt;iptables&lt;/tt&gt; 查看防火墙策略：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
(ins)root&amp;#64;localhost /# /system/bin/iptables -L -v
...
Chain mobile (13 references)
 pkts bytes target     prot opt in     out     source               destination
    0     0 REJECT     all  --  any    any     anywhere             anywhere             owner UID match u0_a133 reject-with icmp-net-prohibited
    0     0 REJECT     all  --  any    any     anywhere             anywhere             owner UID match u0_a113 reject-with icmp-net-prohibited
    0     0 REJECT     all  --  any    any     anywhere             anywhere             owner UID match u0_a128 reject-with icmp-net-prohibited
...
Chain wifi (1 references)
 pkts bytes target     prot opt in     out     source               destination
   88  5815 REJECT     all  --  any    any     anywhere             anywhere             owner UID match u0_a133 reject-with icmp-net-prohibited
    0     0 REJECT     all  --  any    any     anywhere             anywhere             owner UID match u0_a113 reject-with icmp-net-prohibited
    0     0 REJECT     all  --  any    any     anywhere             anywhere             owner UID match u0_a128 reject-with icmp-net-prohibited
...
&lt;/pre&gt;
&lt;p&gt;哈哈，果然！我的 SS 的用户是 u0_a133, 果然是被防火墙过滤了，被过滤的还有其他一些被我添加到联网黑名单的程序！那么到底是什么东西修改的防火墙表呢？想一个一个进程去追踪也没那么容易，只好先看看日志来碰碰运气吧……&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
(ins)root&amp;#64;localhost /# logcat |grep iptables
E/flymed  (  362): exec() res=0, status=0 for /system/bin/iptables -I wifi -m owner --uid-owner 10133 -j REJECT --reject-with icmp-net-prohibited
E/flymed  (  362): exec() res=0, status=0 for /system/bin/iptables -I mobile -m owner --uid-owner 10133 -j REJECT --reject-with icmp-net-prohibited
&lt;/pre&gt;
&lt;p&gt;不得不说，运气真是太好，感觉一个月人品都被败光了……明天支付宝的奖励金应该会少很多吧 _(:з」∠)_&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;丑陋的解决方案&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;用 &lt;tt class="docutils literal"&gt;ps aux | grep flymed&lt;/tt&gt; 可以看到 flymed 的启动命令是 &lt;tt class="docutils literal"&gt;/system/bin/flymed&lt;/tt&gt; 且 ppid 是 1，原生的二进制文件。由于手机管家只是一个普通的安卓应用，而且清除手机管家的数据后再启动手机管家后发现黑名单并没有改变，说明这些黑名单一定是存在手机管家数据之外的地方。之后用 &lt;tt class="docutils literal"&gt;strace&lt;/tt&gt; 追踪了 &lt;tt class="docutils literal"&gt;flymed&lt;/tt&gt; ，发现这货和手机管家用 unix socket 进行通信，设置黑白名单的时候手机管家通过 socket 传一条指令给 &lt;tt class="docutils literal"&gt;flymed&lt;/tt&gt; ， &lt;tt class="docutils literal"&gt;flymed&lt;/tt&gt; 收到后会修改防火墙，然而却没有发现任何的文件写入操作，再之后用 &lt;tt class="docutils literal"&gt;ls &lt;span class="pre"&gt;-l&lt;/span&gt; &lt;span class="pre"&gt;/proc/`pidof&lt;/span&gt; &lt;span class="pre"&gt;flymed`/fd&lt;/span&gt;&lt;/tt&gt; 查看了这货打开的文件，也没能找到线索。最终用 &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; + 人眼暴力搜索，在 &lt;tt class="docutils literal"&gt;/data/system/&lt;/tt&gt; 找到了联网黑名单 &lt;tt class="docutils literal"&gt;netpolicy.xml&lt;/tt&gt; ，应用权限配置 &lt;tt class="docutils literal"&gt;appops.xml&lt;/tt&gt; ， 然而一切都是正常的，没有对 u0_a133 的封杀规则……所以，我猜对 SS 的联网限制大概又是魅族产品经理/工程师推出的“智能”操作吧……&lt;/p&gt;
&lt;p&gt;既然不能通过修改策略完成，那就直接 &lt;tt class="docutils literal"&gt;kill `pidof flymed`&lt;/tt&gt; 吧！kill 之后发现 init 进程立刻把它重启了 _(:з」∠)_。没办法了，我只好写了个伪程序来把它替换掉了……在电脑上用 &lt;tt class="docutils literal"&gt;echo &lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;'#include&amp;lt;unistd.h&amp;gt;\n#include&amp;lt;limits.h&amp;gt;\nint&lt;/span&gt; &lt;span class="pre"&gt;main(){&lt;/span&gt; &lt;span class="pre"&gt;for(;;)sleep(UINT_MAX);&lt;/span&gt; }' | &lt;span class="pre"&gt;aarch64-linux-gnu-gcc&lt;/span&gt; &lt;span class="pre"&gt;-xc&lt;/span&gt; &lt;span class="pre"&gt;-s&lt;/span&gt; &lt;span class="pre"&gt;-static&lt;/span&gt; &lt;span class="pre"&gt;-o&lt;/span&gt; flymed -&lt;/tt&gt; 交叉编译了一个静态链接的 flymed 然后把 &lt;tt class="docutils literal"&gt;/system/bin&lt;/tt&gt; 里的替换掉，再 kill 一次，整个世界都变得美好了。&lt;/p&gt;
&lt;p&gt;虽然失去了 flymed 可能会让手机管家没法工作，但是用 xposed 可以很好地解决这个问题吧。除此之外，目前手机还没有出现任何异常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EOF&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="flyme"></category><category term="折腾"></category></entry></feed>